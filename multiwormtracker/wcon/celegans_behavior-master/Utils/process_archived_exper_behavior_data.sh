#!/bin/bash
#
# Given a set of archive files that were generated by script 'archive_exper_behavior_data.sh',
# take the bz2 file corresponding to each experiment, extract, run
# choreography (via the wrapper script 'run_choreography.sh'), then
# run the R code to parse the data. The bz2 files to be processed must be 
# present in the working directory from which the present script is invoked
#
# *** Note that the path to the script 'run_choreography.sh' and to the R 
# parsing script 'Parse_raw_exper_data/parse_raw_exper_data.R' (see variables 
# 'PRJ_FOLDER_PATH', 'CHOREO_SCRIPT_FOLDER_PATH' and 'R_PARSING_SCRIPT_PATH' below)
#
# TODO: should to be more careful when extracting the data (additional
# folders may end up being created) -> perhaps extract to a temporary folder
#
# Created on November 2016
# Added to repository on June 2017
#

if [ $# -ne 1 ]; then
    echo Usage: ./process_data.sh OUTPUT_FOLDER_R_DATA
    exit -1
fi
output_folder_R_data="$1"

# Path to the project folder and to the relevant scripts
PRJ_FOLDER_PATH=`dirname $(dirname $0)`
CHOREO_SCRIPT_FOLDER_PATH="${PRJ_FOLDER_PATH}/Utils/"
R_PARSING_SCRIPT_PATH="${PRJ_FOLDER_PATH}/Parse_raw_exper_data/parse_raw_exper_data.R"

#
# Exit on error, after displaying a message
#
function exitOnError {
    echo $1
    exit -1
}

function showWarning {
    echo $1 >&2
}

# Returns 0 for success, or -1 for error
function processExperFolder {
    i="$1"

    echo "Processing file $i"
    working_folder=`pwd` # this will be the block folder

    # Check that we can uncompress the file
    base_name=`basename $i`
    folder_name="${base_name%.tar.bz2}"

    echo "Folder name = ${folder_name}"

#    if [[ -f "${folder_name}" || -d "${folder_name}" ]]; then
#        "Folder corresponding to file $i ($folder_name) already exists - SKIPPED"
#    else

    # Extract the data
    tar xfj "$i"
    if [ $? -ne 0 ]; then
        showWarning "Failed to extract the data"
        return -1
    fi

    if [[ ! -d "${folder_name}" ]]; then
        exitOnError "Failed to extract file $i (expected folder $folder_name)"
    fi

    # Invoke the choreography script
    ${CHOREO_SCRIPT_FOLDER_PATH}/run_choreography.sh "${folder_name}"
    if [ $? -ne 0 ]; then
        showWarning "Failed to run choreography"
        return -1
    fi

    # Rename the working folder
    proc_folder_name="${folder_name}-proc"

    echo "Proc folder name = ${proc_folder_name}"

    if [[ -f "${proc_folder_name}" || -d "${proc_folder_name}" ]]; then
        exitOnError "Processed folder $proc_folder_name already exists"
    fi
    mv "${folder_name}" "${proc_folder_name}"
    if [ $? -ne 0 ]; then
        showWarning "Failed to rename folder"
        return -1
    fi

    # Compress the folder, excluding the blob files to save space
    proc_file_path="${proc_folder_name}.tar.bz2"

    echo "Proc file path = ${proc_file_path}"

    if [[ -f "${proc_file_path}" || -d "${proc_file_path}" ]]; then
        exitOnError "Processed file $proc_file_path already exists"
    fi
    tar --exclude="${proc_folder_name}/*.blobs" -j -c -f "${proc_file_path}" "${proc_folder_name}"

    if [ $? -ne 0 ]; then
        showWarning "Failed to pack the processed data"
        return -1
    fi

    # When invoking the R script, make sure to include the full path
    path_R="${working_folder}/${proc_folder_name}"
    log_filename=`basename "${folder_name}"`
    log_filename="log-${log_filename}.txt"

    echo "Path for R script: ${path_R}"
    echo "Log file: ${log_filename}"

    echo "Running R script..."
    Rscript \
        "${R_PARSING_SCRIPT_PATH}" \
        --project-folder-path="${PRJ_FOLDER_PATH}" \
        --input-folder-path="${path_R}" \
        --output-root-folder-path="${output_folder_R_data}" \
        > "${log_filename}" 2>&1
    if [ $? -ne 0 ]; then
        showWarning "Failed to run R script"
        return -1
    fi
    echo "DONE"

    # Remove the processed folder, to save disk space
    rm -fr "${proc_folder_name}"
    if [ $? -ne 0 ]; then
        showWarning "Failed to remove the processed folder"
        return -1
    fi

    # To signal that processing was completed
    touch "SUCCESS-${proc_folder_name}"
    if [ $? -ne 0 ]; then
        showWarning "Failed to touch the success file"
        return -1
    fi
    return 0
}

mkdir -p "${output_folder_R_data}"

# Browse through the files and process
for f in *.tar.bz2; do
    processExperFolder "${f}"
done;
